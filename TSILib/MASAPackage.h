//---------------------------------------------------------------------------

#ifndef MASAPackageH
#define MASAPackageH
//---------------------------------------------------------------------------

#include "TSIPackage.h"

#define MASA_PACKAGE_TITLE_SIZE        			2
#define MASA_PACKAGE_CMD_SIZE          			1
#define MASA_PACKAGE_DATA_SIZE                  2
#define MASA_PACKAGE_HANDLE_ADDRESS_SIZE        4
#define MASA_PACKAGE_HANDLE_LENGTH_SIZE         4
#define MASA_BUFFER_MAX_SIZE                    1024

//---------------------------------------------------------------------------
enum G05SeriesCommand
{
	CMD_DL_END,
	CMD_DL_ERASE_MCU =      0x02,
	CMD_DL_ERASE,
	CMD_DL_WRITE,
	CMD_DL_READ,
	CMD_DL_WRITE_SN =       0xE0,
	CMD_DL_ERASE_4K,
	CMD_DL_DEV_INFO,
	CMD_DL_JUMP_ADDR,
	CMD_DL_SW =             0xEF,
	CMD_DL_ACK =            0xF0,
	CMD_DL_ACK_DEV_INFO =   0xF2,
	CMD_DL_ACK_READ =       0xF5,
	CMD_DL_START =          0xFF,
	CMD_DL_SEL_ERASE =      0x13
} ;

//---------------------------------------------------------------------------
const unsigned char mMASADecodeTable[]=
{
	0x27,0xA8,0xF7,0xC8,0x89,0x57,0xA9,0xB0,0x1A,0x0F,
	0x83,0x5C,0xA4,0x01,0x42,0xA6,0x71,0xDE,0x1E,0xF8,
	0x0D,0x91,0x4E,0x2D,0xFB,0x81,0x92,0x24,0x0C,0x48,
	0xBB,0x61,0xA2,0xB2,0xBA,0xEB,0xAA,0xE8,0x68,0x2C,
	0x4A,0x21,0xB6,0x9B,0x2E,0x47,0x60,0xC6,0xB1,0x0A,     // 50
	0x5D,0x3E,0xC1,0x64,0x44,0xE4,0xA1,0x3B,0xDF,0x50,
	0xD4,0xF0,0x14,0xE9,0x9C,0x19,0x6A,0x5A,0x70,0xB3,
	0xC9,0x97,0xED,0xDC,0x28,0xEE,0x3A,0x04,0xE1,0x03,
	0x32,0xFF,0x98,0x2B,0x2A,0x79,0x1D,0x08,0x35,0xBF,
	0xA0,0xA3,0xD7,0xB4,0x1B,0xE7,0xCF,0x2F,0x78,0x51,     // 100
	0xD6,0x86,0x6E,0xE0,0xAD,0x67,0xC2,0x65,0xB5,0x00,
	0x02,0xF5,0xDD,0x7E,0x58,0xD9,0x7C,0x31,0xA7,0x34,
	0x30,0x22,0x54,0x18,0x6B,0x6D,0x07,0x6C,0xD3,0x8C,
	0xC7,0x73,0xAB,0x3C,0x62,0xC4,0x4B,0x09,0xCD,0x10,
	0x88,0x4C,0xAC,0xF6,0x8A,0x69,0x96,0x90,0x41,0xCB,     // 150
	0x40,0xD8,0x74,0x80,0x8B,0x85,0x0E,0x06,0xB7,0x84,
	0xFC,0xBE,0x12,0x7B,0x95,0xCA,0x7D,0xD5,0xD1,0x5E,
	0x1F,0x3F,0x8E,0x82,0x9F,0x0B,0x7A,0xCE,0x9D,0xEC,
	0x26,0x4D,0x25,0xDA,0x72,0x4F,0x53,0xEA,0x5B,0x46,
	0x38,0x3D,0x94,0x16,0xBC,0xB9,0x1C,0x33,0x76,0x37,     // 200
	0xC0,0x59,0xF1,0xB8,0xF3,0x9A,0x20,0xFD,0x77,0xF4,
	0xF2,0x05,0x6F,0x63,0xEF,0x9E,0x66,0xD0,0xDB,0x45,
	0xFE,0x56,0xC5,0xA5,0x8D,0xE6,0xAE,0xAF,0x39,0x75,
	0x8F,0x93,0x5F,0x87,0x17,0xCC,0xF9,0x29,0x49,0xFA,
	0x15,0xD2,0xE2,0x52,0x43,0x11,0x7F,0x99,0x13,0xE3,     // 250
    0xC3,0xE5,0x23,0x55,0x36,0xBD
} ;

const unsigned char mMASAEncodeTable[]=
{
	0x6D,0x0D,0x6E,0x4F,0x4D,0xD3,0x9D,0x7E,0x57,0x89,
	0x31,0xAF,0x1C,0x14,0x9C,0x09,0x8B,0xF5,0xA2,0xF8,
	0x3E,0xF0,0xC1,0xEA,0x7B,0x41,0x08,0x5E,0xC4,0x56,
	0x12,0xAA,0xCE,0x29,0x79,0xFC,0x1B,0xB6,0xB4,0x00,
	0x4A,0xED,0x54,0x53,0x27,0x17,0x2C,0x61,0x78,0x75,     // 50
	0x50,0xC5,0x77,0x58,0xFE,0xC7,0xBE,0xE4,0x4C,0x39,
	0x85,0xBF,0x33,0xAB,0x96,0x94,0x0E,0xF4,0x36,0xDB,
	0xBD,0x2D,0x1D,0xEE,0x28,0x88,0x8D,0xB5,0x16,0xB9,
	0x3B,0x63,0xF3,0xBA,0x7A,0xFD,0xDD,0x05,0x72,0xC9,
	0x43,0xBC,0x0B,0x32,0xA9,0xE8,0x2E,0x1F,0x86,0xD5,     // 100
	0x35,0x6B,0xD8,0x69,0x26,0x91,0x42,0x7C,0x7F,0x7D,
	0x66,0xD4,0x44,0x10,0xB8,0x83,0x98,0xE5,0xC6,0xD0,
	0x62,0x55,0xB0,0xA3,0x74,0xA6,0x71,0xF6,0x99,0x19,
	0xAD,0x0A,0x9F,0x9B,0x65,0xE9,0x8C,0x04,0x90,0x9A,
	0x81,0xE0,0xAC,0xE6,0x93,0x15,0x1A,0xE7,0xC0,0xA4,     // 150
	0x92,0x47,0x52,0xF7,0xCD,0x2B,0x40,0xB2,0xD7,0xAE,
	0x5A,0x38,0x20,0x5B,0x0C,0xDF,0x0F,0x76,0x01,0x06,
	0x24,0x84,0x8E,0x68,0xE2,0xE3,0x07,0x30,0x21,0x45,
	0x5D,0x6C,0x2A,0x9E,0xCB,0xC3,0x22,0x1E,0xC2,0xFF,
	0xA1,0x59,0xC8,0x34,0x6A,0xFA,0x87,0xDE,0x2F,0x82,     // 200
	0x03,0x46,0xA5,0x95,0xEB,0x8A,0xB1,0x60,0xD9,0xA8,
	0xF1,0x80,0x3C,0xA7,0x64,0x5C,0x97,0x73,0xB7,0xDA,
	0x49,0x70,0x11,0x3A,0x67,0x4E,0xF2,0xF9,0x37,0xFB,
	0xE1,0x5F,0x25,0x3F,0xBB,0x23,0xB3,0x48,0x4B,0xD6,
	0x3D,0xCA,0xD2,0xCC,0xD1,0x6F,0x8F,0x02,0x13,0xEC,     // 250
	0xEF,0x18,0xA0,0xCF,0xDC,0x51
} ;

typedef struct CreateMasaPktWriteInfo
{
	void *data ;                 // 要合在package的資料
} CreateMasaPktWriteInfo ;

typedef struct CreateMasaPktEraseInfo
{
	unsigned short numOfBlock ;
	unsigned int blockSize ;
	unsigned int fwStartAddress ;
} CreateMasaPktEraseInfo ;

typedef union CreateMasaPktCmdItemInfo
{
	CreateMasaPktEraseInfo erase ;
	CreateMasaPktWriteInfo write ;
} CreateMasaPktCmdItemInfo ;

typedef struct CreateMasaPktCmdInfo
{
	unsigned char name ;
	CreateMasaPktCmdItemInfo item ;
} CreateMasaPktCmdInfo ;

typedef struct CreateMasaPktInfo
{
	unsigned int handleAddress ; // 從哪個位置開始處理
	unsigned int handleLength ;  // 從handleAddress開始處理的長度
	CreateMasaPktCmdInfo cmd ;
} CreateMasaPktInfo ;

//---------------------------------------------------------------------------
int CreateMASAPkt(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;
int inline CreateMASAPktBase(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;
int inline CreateMASAPktErase(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;

int inline CreateMASAPkt_CMD_DL_WRITE(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;
int inline CreateMASAPkt_CMD_DL_READ(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;
int inline CreateMASAPkt_CMD_DL_ERASE_4K(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;
int inline CreateMASAPkt_CMD_DL_START(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;
int inline CreateMASAPkt_CMD_DL_SW(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;
int inline CreateMASAPkt_CMD_DL_SEL_ERASE(unsigned char *buf, int devType, CreateMasaPktInfo createInfo) ;
int inline CreateMASAPktHeadPart(unsigned char *buf, int devType, CreateMasaPktInfo createInfo, int dataSize) ;
int inline CreateMASAPktCheckSumPart(unsigned char *buf, int bufSize) ;
int inline CreateMASAPktEraseData(unsigned char *buf, CreateMasaPktInfo createInfo) ;

int inline CalculateMASAPktChecksum(unsigned char *buf, int bufSize) ;
void inline EncodeMASAPkt(unsigned char *buf, int bufSize) ;
void inline DecodeMASAPkt(unsigned char *buf, int bufSize) ;

int JudgeMASAPkt(WriteComInfo *comInfo, void *ackInfo, FILE *dwFp, void *processBar = NULL, UpdateProcessFun callBackUpdateProcessFun = NULL) ;
int CreateExpectMASAPkt(int devType, unsigned char *oriBuf, int oriBufSize, unsigned char *expectBuf) ;
int inline CreateExpectMASAPkt_CMD_DL_ACK(unsigned char *buf) ;
int inline CreateExpectMASAPkt_CMD_DL_ACK_READ(unsigned char *oriBuf, unsigned char *buf) ;
int inline CreateExpectMASAPkt_CMD_DL_ACK_DEV_INFO(int devType, unsigned char *buf) ;
int CheckMASAPkt(int devType, unsigned char *expectBuf, int expectBufSize, unsigned char *resBuf, int resBufSize) ;

int AnalysisMASAPkt(unsigned char *buf, int bufSize, int devType, TSIAckStatus *ackInfo, FILE *dwFp) ;
int inline AnalysisMASAPkt_CMD_DL_ACK_DEV_INFO(unsigned char *buf, int bufSize, int devType, TSIAckStatus *ackInfo) ;
int inline AnalysisMASAPkt_CMD_DL_ACK(unsigned char *buf, int bufSize, int devType) ;
int inline AnalysisMASAPkt_CMD_DL_ACK_READ(unsigned char *buf, int bufSize, int devType, FILE *dwFp) ;

int SendMASAPkt(HANDLE comPort, FILE *rwFp, int devType, int pktSize, char cmd, int startAddr, int dataSize, void *processBar = NULL, UpdateProcessFun callBackUpdateProcessFun = NULL) ;
int StartCommucateMASA(HANDLE comPort, int devType) ;
int EndCommucateMASA(HANDLE comPort, int devType) ;

#endif
